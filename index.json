{
  "guides/RecycleItemsView_CustomEffect.html": {
    "href": "guides/RecycleItemsView_CustomEffect.html",
    "title": "Focus with header footer",
    "keywords": "RecycleItemsView is provide default focusing effect that is scaling to 1.2 If want to change this behavior, you need to inherit RecycleItemsView and override OnItemFocused method protected virtual void OnItemFocused(object data, View targetView, bool isFocused); When need to apply focusing effect, We call this method with focused view data is a FocusedItem in ItemsSource targetView is a realized view that created by ItemTemplate isFocused whether focus or not. You need to implement Focused and Unfocused cases If not, all views will be shown as focused Focus with header footer Header/Footer also can get a focus and triggered OnItemFocused when focused. So, if you want know that focused view is header or not, compare data parameter with Header property Custom Fouse Effect example <local:MyRecycleItemsView ...> <tvcontrols:RecycleItemsView.ItemTemplate> <DataTemplate> <AbsoluteLayout> <Image Source=\"{Binding Source}\" Aspect=\"Fill\" AbsoluteLayout.LayoutBounds=\"0, 0, 1, 1\" AbsoluteLayout.LayoutFlags=\"All\"/> <StackLayout Padding=\"20\" BackgroundColor=\"#aa000000\" AbsoluteLayout.LayoutBounds=\"0, 1, 480, 100\" AbsoluteLayout.LayoutFlags=\"PositionProportional\"> <Label Text=\"{Binding Text}\" TextColor=\"AntiqueWhite\" FontSize=\"70\" FontAttributes=\"Bold\" /> <Label Text=\"{Binding DetailText}\" FontSize=\"40\"/> </StackLayout> </AbsoluteLayout> </DataTemplate> </tvcontrols:RecycleItemsView.ItemTemplate> </local:MyRecycleItemsView> protected override void OnItemFocused(object data, View targetView, bool isFocused) { AbsoluteLayout layout = (AbsoluteLayout)targetView; View textarea = layout.Children[1]; if (isFocused) { targetView.ScaleTo(1.2); var animation = new Animation((rate) => { AbsoluteLayout.SetLayoutBounds(textarea, new Rectangle(0, 1, 480, 100 + rate * 100)); }); animation.Commit(this, $\"Focused - {data.GetHashCode()}\"); } else { targetView.ScaleTo(1.0); var animation = new Animation((rate) => { AbsoluteLayout.SetLayoutBounds(textarea, new Rectangle(0, 1, 480, 200 - rate * 100)); }); animation.Commit(this, $\"Focused - {data.GetHashCode()}\"); } } When Item was focused, text area is grow up to 200px We can know a View type because it was created by ItemTemplate So, we can get a StackLayout object and make larger"
  },
  "guides/MediaPlayer_Introduction.html": {
    "href": "guides/MediaPlayer_Introduction.html",
    "title": "MediaPlayer",
    "keywords": "MediaPlayer Introduction MediaPlayer provides functionality of playing multimedia. It also includes related view components that display video stream. How to use C# var view = new MediaView(); var player = new MediaPlayer(); player.VideoOutput = view; player.Source = \"a.mp4\"; player.Start(); XAML <tvcontrols:MediaView> <tvcontrols:MediaPlayer Source=\"{Binding Source}\" AutoStart=\"true\"/> </tvcontrols:MediaView> PlaybackState MediaPlayer has PlaybackState. Some APIs only work on the certain state and some APIs transit the state. State diagram of PlaybackState Video output types Overlay It displays video data on the overlay plane. It is more efficient and fast but has a limit shape. Usually it is used to display video as fullscreen. OverlayPage OverlayMediaView #### Buffer It displays video data on the graphics buffer using GL surface. It is free to change the shape, but if it does not support GL surface, you can't use it. It is usually used to attach a video on a part of the view. MediaView Associating Player with media view MediaPlayer and MediaView are created independently. To display video data into MediaView, the developer needs to associate Player and MediaView. Use VideoOutput property of Player player.VideoOutput = new MediaView(); Use Player property of MediaView <tvcontrols:MediaView> <tvcontrols:MediaView.Player> <tvcontrols:MediaPlayer Source=\"{Binding Source}\"/> </tvcontrols:MediaView.Player> </tvcontrols:MediaView> mediaView.Player = new MediaPlayer(); Embedding controls By default, MediaPlayer provides an embedding control. If you don't want to use the default embedding controls, set UsesEmbeddingControls to false. public bool UsesEmbeddingControls AutoPlay/AutoStop Video can't play before media view is shown, so you need to know when the media views are available. If you use AutoPlay/AutoStop property, you don't need to care about view state. AutoPlay public bool AutoPlay Automatically starts a player when a View was shown (Rendered) AutoStop public bool AutoStop Automatically stops a player when a View was gone (Renderer was disposed) Related Links Sample"
  },
  "guides/RecycleItemsView_Introduction.html": {
    "href": "guides/RecycleItemsView_Introduction.html",
    "title": "RecycleItemsView",
    "keywords": "RecycleItemsView Introduction RecycleItemsView is a view that wish to take in a list of user objects and produce views for each of them to be displayed. Especially, it can be used when the data is displayed in the same view template. and it reuse the templated view when it out of sight Concept How to use C# var recycleView = new RecycleItemsView() { ContentMargin = 60, ItemHeight = 350, ItemWidth = 300, Spacing = 20, ItemsSource = item, ItemTemplate = new DataTemplate(() => { Label label; var view = new StackLayout { Children = { (label = new Label { }) } }; view.SetBinding(StackLayout.BackgroundColorProperty, new Binding(\"Color\")); label.SetBinding(Label.TextProperty, new Binding(\"Label\")); return view; }) }), XAML <tvcontrols:RecycleItemsView ContentMargin=\"60\" ItemWidth=\"300\" ItemHeight=\"350\" Spacing=\"20\" ItemsSource=\"{Binding Items}\"> <tvcontrols:RecycleItemsView.ItemTemplate> <DataTemplate> <StackLayout BackgroundColor=\"{Binding Color}\"> <Label Text=\"{Binding Text}\"/> </StackLayout> </DataTemplate> </tvcontrols:RecycleItemsView.ItemTemplate> </tvcontrols:RecycleItemsView> Properties related layouting Item width and height All items in RecycleItemsView have the same width and height because it should be reused. Multiple columns You can display items on multiple lines. Use ColumnCount property to apply multiple columns Header and Footer RecycleItemsView display items with same DataTemplate . if you want to use a special looks for first or last, you can use Header, Footer property The Header and Footer can be a data object that contain view model or a view instance. If Header or Footer is a View, it directly used for displaying header/footer. If not, HeaderTemplate/FooterTemplate is used to make a view that used for displaying header/footer Related Links DataTemplate Sample"
  },
  "api/index.html": {
    "href": "api/index.html",
    "title": "Tizen TV UI Controls",
    "keywords": "Tizen TV UI Controls This document is the API Specification for the Tizen TV UIControls. Namespace Description Provide the classes that help creating Tizen TV applications."
  },
  "guides/Overview.html": {
    "href": "guides/Overview.html",
    "title": "Developer Guides",
    "keywords": "Developer Guides Welcome to the Tizen TV UI Controls guides."
  },
  "guides/MediaPlayer_Converter.html": {
    "href": "guides/MediaPlayer_Converter.html",
    "title": "Problem definition",
    "keywords": "Problem definition MediaPlayer.Position is int value, but Progressbar.Progress is double value (0 to 1.0) Need duration to convert Create a custom Converter Implements Xamarin.Forms.IValueConverter public class PositionToProgressConverter : IValueConverter { public object Convert(object value, Type targetType, object parameter, CultureInfo culture) { return ((int)value / (double)(GetParameter(parameter))); } public object ConvertBack(object value, Type targetType, object parameter, CultureInfo culture) { return (int)((double)value * GetParameter(parameter)); } int GetParameter(object parameter) { var duration = ((Tizen.TV.UIControls.Forms.MediaPlayer)parameter).Duration; if (duration == 0) duration = 1; return duration; } } Pass a MediaPlayer instance as the parameter Use custom converter in Xaml .... <ContentPage.Resources> <ResourceDictionary> <local:PositionToProgressConverter x:Key=\"positionToProgress\"/> </ResourceDictionary> </ContentPage.Resources> ... <ProgressBar Progress=\"{Binding Source={x:Reference Player}, Path=Position, Converter={StaticResource positionToProgress}, ConverterParameter={x:Reference Player}}}\"/> ...."
  },
  "index.html": {
    "href": "index.html",
    "title": "Tizen TV UIControls",
    "keywords": "Tizen TV UIControls The Tizen TV UIControls is a set of helpful extensions to the Xamarin Forms framework for the Samsung TV device. The binaries are available via NuGet (package name is Tizen.TV.UIControls.Forms) with the source available here. Major Classes Name Description Class that provieds the essential components to play the media contents. Class that is used to display the video output on the screen. An overlay MediaView. Class that is used to display the video output on a page. ScrollView that efficiently displays a collection of data using DataTemplate. Class that helps developers to handle the remote control events that are emitted from TV devices."
  },
  "guides/InputEvents.html": {
    "href": "guides/InputEvents.html",
    "title": "InputEvents",
    "keywords": "InputEvents InputEvents helps developers to handle the remote control events that are emitted from TV devices. The RemoteKeyHandler which contains a Command and key events can be added to a collection of handlers. The access key can be set to a specific view and the view gets a direct focus when the key is pressed. When the view is a Button , Clicked event occurs also. How to add RemoteKeyHandler Get a collection of handlers using GetEventHandlers(BindableObject view) , and add RemoteKeyHandler to it. xaml <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:uicontrols=\"clr-namespace:Tizen.TV.UIControls.Forms;assembly=Tizen.TV.UIControls.Forms\" x:Class=\"Sample.TestRemoteControl_xaml\" x:Name=\"rootPage\"> <ContentPage.Content> <StackLayout> <Button Text=\"Button1\"> <uicontrols:InputEvents.EventHandlers> <uicontrols:RemoteKeyHandler Command=\"{Binding ButtonHandler, Source={x:Reference rootPage}}\"/> </uicontrols:InputEvents.EventHandlers> </Button> </StackLayout> </ContentPage.Content> </ContentPage> C# public class TestRemoteControl : ContentPage { public TestRemoteControl() { Button button1 = new Button { Text = \"Button1\" }; RemoteKeyHandler buttonHandler = new RemoteKeyHandler(new Action<RemoteControlKeyEventArgs>((arg) => { button1.Text = $\"Button1 : {arg.KeyType} {arg.KeyName} {arg.PlatformKeyName}\"; })); InputEvents.GetEventHandlers(button1).Add(buttonHandler); Content = new StackLayout { Children = { button1, } }; } } How to set an access key xaml <ContentPage xmlns=\"http://xamarin.com/schemas/2014/forms\" xmlns:x=\"http://schemas.microsoft.com/winfx/2009/xaml\" xmlns:uicontrols=\"clr-namespace:Tizen.TV.UIControls.Forms;assembly=Tizen.TV.UIControls.Forms\" x:Class=\"Sample.TestRemoteControl_xaml\" x:Name=\"rootPage\"> <ContentPage.Content> <StackLayout> <Button Text=\"Button1 (accesskey 1)\" uicontrols:InputEvents.AccessKey=\"NUM1\" Clicked=\"OnClicked\" /> </StackLayout> </ContentPage.Content> </ContentPage> C# public class TestRemoteControl : ContentPage { int _clickedTimes = 0; public TestRemoteControl() { Button button1 = new Button { Text = \"Button2 (Accesskey 1)\" }; button1.Clicked += (s, e) => { button1.Text = $\"Button1 (Accesskey 1): {++_clickedTimes} clicked\"; }; InputEvents.SetAccessKey(button1, RemoteControlKeyNames.NUM1); Content = new StackLayout { Children = { button1, } }; } }"
  }
}